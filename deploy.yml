parameters:
- name: release
  type: boolean
  default: false
- name: image
  type: string
  default: ''
- name: conda_label
  type: string
  default: 'test'
- name: package_list
  type: object
  default: []
- name: gh_pages_subdirectory
  type: string
  default: ''
- name: publish_docs
  type: boolean
  default: true

stages:
  - stage: 'deploy'
    displayName: 'Deployment'

    jobs:
      - job: 'deploy_docs_and_packages'
        displayName: 'Deploy docs and packages'
        pool:
          vmImage: ${{ parameters.image }}
        variables:
          - group: tokens
          - name: documentation_artefact_path
            value: '$(Build.StagingDirectory)/documentation'
          - name: documentation_repo_path
            value: '$(Build.StagingDirectory)/git'
        steps:
          - bash: |
              echo "##vso[task.prependpath]$CONDA/bin"
              echo "##vso[task.setvariable variable=conda_dir]$CONDA"
            displayName: 'Configure Conda'
          - bash: |
              set -ex
              conda --version
              conda install -c conda-forge --yes anaconda-client
              conda config --set always_yes yes --set changeps1 no
            displayName: 'Install anaconda-client'
          - ${{ each package in parameters.package_list }}:
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                specificBuildWithTriggering: true
                downloadType: 'single'
                artifactName: ${{ package.Key }}
                downloadPath: '$(Build.StagingDirectory)/packages'
              displayName: 'Retrieve built conda package'
            - bash: |
                anaconda --token "$ANACONDA_TOKEN" upload --user scipp --label ${{ parameters.conda_label }} '$(Build.StagingDirectory)/packages/${{ package.Key }}/'*.tar.bz2 --force
              env:
                ANACONDA_TOKEN: $(anaconda_token_secret)
              displayName: 'Deploy to anaconda cloud ${{ package.Key }}'
          - ${{ if eq(parameters.publish_docs, true) }}:
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                specificBuildWithTriggering: true
                downloadType: 'single'
                artifactName: 'documentation'
                downloadPath: '$(Build.StagingDirectory)'
              displayName: 'Retrieve built documentation'
            - task: InstallSSHKey@0
              inputs:
                knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
                sshPublicKey: '$(gh_pages_deploy_key_public)'
                sshKeySecureFile: 'gh_pages_deploy_key'
              displayName: 'Add GitHub Pages deploy key'
            - bash: |
                set -ex
                # Publishing documentation involves a Git commit, this sets the identity for that commit
                git config --global user.name 'Documentation Builder'
                git config --global user.email 'nobody@localhost'
              displayName: 'Git config'
            - ${{ if eq(length(parameters.gh_pages_subdirectory), 0) }}:
              - bash: |
                  set -ex
                  git clone git@github.com:scipp/scipp.github.io "$(documentation_repo_path)"
                displayName: 'Clone scipp.github.io repository'
            - ${{ if not(eq(length(parameters.gh_pages_subdirectory), 0)) }}:
              - bash: |
                  set -ex
                  git clone git@github.com:scipp/${{ parameters.gh_pages_subdirectory }} "$(documentation_repo_path)"
                  cd "$(documentation_repo_path)"
                  # Checkout the gh-pages branch
                  git checkout gh-pages
                displayName: 'Clone ${{ parameters.gh_pages_subdirectory }}  documentation repository'
            - bash: |
                set -ex
                cd "$(documentation_repo_path)"
                # Stage removal of everything
                git rm -rf .
                git status
                # Unstage deletion of and recover "release" directory
                git reset -- release || true
                git checkout -- release || true
                git status
              displayName: 'Remove old documentation, keeping releases'
            - bash: |
                set -ex
                cd "$(documentation_repo_path)"
                # The .nojekyll file is used to turn off GitHub Pages building
                touch .nojekyll
                rsync -av "$(documentation_artefact_path)/" .
                git add .
                git status
              displayName: 'Copy new documentation'
            - bash: |
                set -ex
                release_docs_dir="release/$(git describe --tags)"
                cd "$(documentation_repo_path)"
                mkdir -p "$release_docs_dir"
                rsync -av "$(documentation_artefact_path)/" "$release_docs_dir"
                git add .
                git status
              condition: and(succeeded(), ${{ parameters.release }})
              displayName: 'Copy new documentation for release'
            - bash: |
                set -ex
                cd "$(documentation_repo_path)"
                # Amend last commit to keep repository size down
                git commit --amend --date="$(date)" --message='Auto commit from CI'
                git status
                git push --force-with-lease
                git status
              displayName: 'Push to GitHub Pages'
