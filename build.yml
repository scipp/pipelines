parameters:
- name: py_version
  type: string
  default: ''
- name: image
  type: string
  default: ''
- name: ccache
  type: boolean
  default: false
- name: clcache
  type: boolean
  default: false
- name: OSX_VERSION
  type: string
  default: ''
- name: conda_env
  type: string
  default: ''
- name: verbose
  type: boolean
  default: false
- name: noarch
  type: boolean
  default: false

jobs:
  - job:
    timeoutInMinutes: 120
    displayName: ${{ format('{0}-py{1}', parameters.image, parameters.py_version) }}
    pool:
      vmImage: ${{ parameters.image }}
    variables:
      - name: OSX_VERSION
        value: ${{ parameters.OSX_VERSION }}

    steps:
      - checkout: self
        submodules: true

      # Note that using set -ex when setting vso variables messes up paths
      - ${{ if contains(parameters.image, 'windows') }}:
        - bash: |
            echo "##vso[task.prependpath]$CONDA\Scripts"
            echo "##vso[task.setvariable variable=scipp_install_prefix]$CONDA\scipp_install"
          displayName: 'Configure Conda path'
      - ${{ if not(contains(parameters.image, 'windows')) }}:
        - bash: |
            echo "##vso[task.prependpath]$CONDA/bin"
            echo "##vso[task.setvariable variable=scipp_install_prefix]$CONDA/scipp_install"
          displayName: 'Configure Conda path'

      - bash: |
          echo "##vso[task.setvariable variable=conda_dir]$CONDA"
        displayName: 'Configure Conda dir'
      - ${{ if not(eq(length(parameters.OSX_VERSION), 0)) }}:
        - bash: |
            set -ex
            sudo chown -R $USER $CONDA
          displayName: 'Take ownership of Conda installation'

      - bash: |
          if test -f tools/build_cpp.py; then
             echo "##vso[task.setvariable variable=buildcppfileexists]true"
          fi
        displayName: 'Check for existence of cpp build file'

      - bash: |
          set -ex
          # Specify python version in env file
          sed 's/- python$/- python=${{ parameters.py_version }}/g' ${{ parameters.conda_env }} > tempenv.yml
          conda env create -f tempenv.yml -n tempenv
        displayName: 'Create conda environment'
        condition: eq(variables['buildcppfileexists'], 'true')

      - ${{ if eq(parameters.ccache, true) }}:
        - template: ccache.yml
      - ${{ if eq(parameters.clcache, true) }}:
        - template: clcache.yml

      - bash: |
          set -ex
          source activate tempenv
          if [ '${{ parameters.clcache }}' == 'True' ]; then
            flags="--caching"
          fi
          python tools/build_cpp.py --prefix=$SCIPP_INSTALL_PREFIX $flags
        displayName: 'Build and run C++ tests'
        condition: eq(variables['buildcppfileexists'], 'true')

      - bash: |
          set -ex
          source activate tempenv
          export PYTHONPATH=$SCIPP_INSTALL_PREFIX
          python -m pytest -v python
        displayName: 'Python tests'

      - ${{ if contains(parameters.image, 'ubuntu') }}:
        - bash: |
            set -ex
            source activate tempenv
            export PYTHONPATH=$SCIPP_INSTALL_PREFIX
            python docs/build_and_test.py
          displayName: 'Doc tests'

      - ${{ if eq(parameters.ccache, true) }}:
        - bash: ccache --show-stats
          displayName: 'Report ccache statistics'
      - ${{ if eq(parameters.clcache, true) }}:
        - bash: |
            set -ex
            source activate tempenv
            clcache -s
          displayName: 'Report clcache statistics'
